# =================== Copilot 
{{ if .helix.has_copilot_pr }}
[language-server.copilot]
command = "copilot"
args = ["--stdio"]
{{ end }}

# =================== Python 
# add the language server
[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]
# will get "Async jobs timed out" errors if this empty config is not added
config = {venv = "./.venv", venvPath = "."}

[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py","pyi","py3","pyw","ptl",".pythonstartup",".pythonrc","SConstruct"]
shebangs = ["python"]
roots = ["setup.py", "setup.cfg", "pyproject.toml"]
comment-token = "#"
language-servers = [ "pyright"  {{if .helix.has_copilot_pr}}, "copilot" {{end}}]
indent = { tab-width = 4, unit = "    " }

# =================== C 
[[language]]
name = "c"
file-types = ["h", "c"]
roots = ["justfile", "makefile"]
language-servers = [ "clangd"  {{if .helix.has_copilot_pr}}, "copilot" {{end}}]
formatter = {command = "clang-format", args = ["--style=google"]}


# =============== Tailwind configuration

[[language]]
name = "svelte"
scope = "source.svelte"
file-types = ["svelte"]
roots = ["tailwind.config.js","tailwind.config.cjs"]
language-servers = [ "tailwindcss-svelte", "svelteserver"  {{if .helix.has_copilot_pr}}, "copilot" {{end}}]

[language-server.tailwindcss-svelte]
language-id = "svelte"
command = "tailwindcss-language-server"
args = ["--stdio"]
config = { }

[[language]]
name = "css"
scope = "source.css"
file-types = ["css", "postcss"]
language-servers = [ "tailwindcss-css", "vscode-css-language-server"  {{if .helix.has_copilot_pr}}, "copilot" {{end}}]

[language-server.tailwindcss-css]
language-id = "css"
command = "tailwindcss-language-server"
args = ["--stdio"]
config = { }

[[language]]
name = "html"
scope = "text.html.basic"
file-types = ["html"]
language-servers = [ "tailwindcss-html", "vscode-html-language-server"  {{if .helix.has_copilot_pr}}, "copilot" {{end}}]

[language-server.tailwindcss-html]
language-id = "html"
command = "tailwindcss-language-server"
args = ["--stdio"]
config = { }


# =============== Caddyfile configuration

[[language]]
name = "caddyfile"
roots = []
scope = "source.caddyfile"
injection-regex = "caddyfile"
file-types = ["Caddyfile"]
comment-token = "#"
language-server = [{{if .helix.has_copilot_pr}}"copilot" {{end}}]
indent = { tab-width = 4, unit = "\t" }
formatter = { command = "caddy-fmt"}

# =============== Typst configuration

[language-server.typst-lsp]
language-id = "typst"
command = "typst-lsp"
args = []
config = { }

[[language]]
name = "typst"
roots = []
scope = "source.typst"
injection-regex = "typst"
file-types = ["typ"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }

language-servers = [ "typst-lsp"  {{if .helix.has_copilot_pr}}, "copilot" {{end}}]


# =============== Prettier configuration

# prettier
[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }

# =============== Typescript/Javascript configuration
# - Eslint
[language-server.eslint-lsp]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint-lsp.config]
validate = "on"
experimental = { useFlatConfig = false }
rulesCustomizations = []
run = "onType"
format = { enable = true }
problems = { shortenToSingleLine = false }
nodePath = ""
debug = true
codeAction = { disableRuleComment = {enable = true, location = 'seperateLine'}, showDocumentation = {enable = true}}
workingDirectory = { mode = 'location' }
workingDirectories = [{ mode = 'location' }]


# - Ts/Js
[[language]]
name = "javascript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
{{ if not .helix.use_eslint }}
formatter = { command = 'bunx', args = ["biome", "format", '--stdin-file-path=x.js'] }
{{ end }}
language-servers = ["typescript-language-server" {{if .helix.use_eslint }}, "eslint-lsp"{{ end }} {{if .helix.has_copilot_pr}}, "copilot" {{end}}]

[[language]]
name = "typescript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
{{ if not .helix.use_eslint }}
formatter = { command = 'bunx', args = ["biome", "format", '--stdin-file-path=x.ts'] }
{{ end }}
language-servers = ["typescript-language-server" {{if .helix.use_eslint }}, "eslint-lsp"{{ end }} {{if .helix.has_copilot_pr}}, "copilot" {{end}}]
